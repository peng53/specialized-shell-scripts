#!/bin/sh
tempDirectory=/mnt/ramdisk/
urlQueue=${tempDirectory}mq
urlQueueHist=${tempDirectory}q_hist
playerDefaultArgs='--pause --keep-open --really-quiet'
youtubeDlDefaultArgs='--no-part --youtube-skip-dash-manifest --no-call-home --no-playlist'
tryResume=0

videoDownloadHandler(){
	case "$URL" in
		*.youtube.com/watch?v=*)
			youtube_dash
			view_file
		;;
		*.crunchyroll.com/*)
			streamlink_stream
		;;
		*)
			echo 'No url matches'
		;;
	esac
}

addToHist(){
	if [ -s $urlQueueHist ]
	then
		last=$(tail -n 1 $urlQueueHist)
		[ $last = $1 ] && return 0
	fi
	echo $1 >> $urlQueueHist
}
setUrlFromQueue(){
	# Gets top of the top. Pops it unless there's an 1st argument.
	read -r URL < $urlQueue
	[ $# -eq 0 ] && sed -i '1d;/^$/d' $urlQueue
}
arg_or_xclip(){
	[ $# -gt 0 ] && echo $1 || xclip -o 2> /dev/null
}
set_url(){
	# Sets url to either $1 or whatever on the queue.
	[ $# -gt 0 ] && URL=$1 || [ -s $urlQueue ] && setUrlFromQueue
	[ -z "$URL" ] && exit 1
	echo 'URL:' $URL
}
set_url_ax(){
	# Given an arglist, set URL if possible.
	# Sets url to either $1 or whatever on the xclipboard.
	# Special case if $URL was 'hist' in which setUrlFromHist is used.
	URL=$(arg_or_xclip $@)
	[ "$URL" = 'hist' ] && setUrlFromHist
	[ -z "$URL" ] && [ -s $urlQueue ] && exit 1
	echo 'URL:' $URL
}
setUrlFromHist(){
	# Set $URL to last line of hist file if it exists.
	[ -s $urlQueueHist ] || exit 1
	URL=$(tail -n 1 $urlQueueHist)
}
setTryResume(){
	# Sets $tryResume if needed.
	if [ "$1" = 'r' ]
	then
		resume=1
		echo 'Resuming download..'
		return 0
	else
		return 1
	fi
}
view_file(){
	[ -s ${tempDirectory}1aud ] && dash=--audio-file=${tempDirectory}1aud
	[ -s ${tempDirectory}1 ] && player $playerDefaultArgs ${tempDirectory}1 $dash &
}
overwriteVidBuf(){
	# Overwrites filename 2nd arg at ${tempDirectory} with 1st arg
	[ -f ${tempDirectory}$1 ] && mv -f ${tempDirectory}$1 ${tempDirectory}$2
}
youtube_f_get(){
	# Uses $URL $tryResume
	# Args are 1-fmt 2-speed 3-suffix
	[ $tryResume -eq 0 ] && overwriteVidBuf 1${3} 0${3}
	echo 'Downloading format:' $1 'and s =' $2
	youtube-dl $youtubeDlDefaultArgs -r $2 -f $1 $URL -o ${tempDirectory}1${3} &
}
youtube_dash(){
	# Downloads both video and audio dash versions.
	# Uses $URL $tryResume
	addToHist $URL
	youtube_f_get 'bestvideo[height<='${vres=240}'][ext=webm]' ${speed=32K}
	sleep 10
	if [ ! -s ${tempDirectory}1 ]
	then
		echo 'Could not get video data.'
		exit 1
	fi
	youtubeDlDefaultArgs='-q '$youtubeDlDefaultArgs
	# Next call to youtube_f_get is quiet
	printf '\n'
	youtube_f_get 'bestaudio[abr<='${abr=85}']' ${aspeed=32K} aud
	sleep 20
}
streamlink_dl(){
	# Uses $: URL tryResume
	[ $tryResume -eq 0 ] && overwriteVidBuf 1 0 && overwriteVidBuf 1aud 0aud
	addToHist $URL
	echo 'Downloading at q =' ${squality=240p}
	streamlink $URL ${squality} -o ${tempDirectory}1 &
	sleep 30
}
streamlink_stream(){
	# Uses $: URL
	addToHist $URL
	echo 'Streaming at' ${squality=240p}
	streamlink -p 'mpv --title="streamlink player"' --player-no-close --player-passthrough hls $URL ${squality}
}
if [ $# -gt 0 ]
then
	case "$1" in
		add)
			shift
			set_url_ax $@
			if [ -n $URL ]
			then
				echo 'Added to queue.'
				echo $URL >> $urlQueue
			fi
		;;
		top)
			setUrlFromQueue KEEP
			echo $URL
		;;
		get)
			setUrlFromQueue
			echo $URL
			addToHist $URL
		;;
		fls)
			> $urlQueue
			echo 'Queue flushed.'
		;;
		see)
			cat $urlQueue
		;;
		view)
			view_file
		;;
		halt)
			killall youtube-dl
			echo 'youtube-dl killed.'
		;;
		hist)
			cat $urlQueueHist
		;;
		ytd)
			# (resume-able)
			shift
			setTryResume $1 && shift
			set_url_ax $@
			youtube_dash && view_file
		;;
		sld)
			# (resume-able)
			shift
			setTryResume $1 && shift
			set_url $@
			streamlink_dl && view_file
		;;
		sls)
			shift
			set_url_ax $@
			streamlink_stream
		;;
		*)
			echo 'Arguments not recognized'
			echo $@
		;;
	esac
else
	#echo Options were: $@
	set_url $@
	# Will only grab from queue since $1 will be blank.
	videoDownloadHandler
fi
