#!/bin/sh
d=/mnt/ramdisk/
q=${d}mq
player_args='--pause --keep-open --really-quiet --autofit-smaller=480x360'
yt_def_args='--no-part --youtube-skip-dash-manifest --no-call-home --no-playlist'
resume=0
alias player='mpv'
alias streamlink='~/.local/bin/streamlink'
alias youtube-dl='~/.local/bin/youtube-dl'

nx(){
	# Gets top of the top. Pops it unless there's an 1st argument.
	read -r url < $q
	[ $# -eq 0 ] && sed -i '1d;/^$/d' $q
}
arg_or_xclip(){
	[ $# -gt 0 ] && echo $1 || xclip -o 2> /dev/null
}
set_url(){
	[ $# -gt 0 ] && url=$1 || [ -s $q ] && nx
	[ -z $url ] && exit 1
	echo URL: $url
}
set_url_ax(){
	# Given an arglist, set URL if possible.
	url=`arg_or_xclip $@`
	[ -z $url ] && [ -s $q ] && exit 1
	echo URL: $url
}
view_file(){
	[ -s ${d}1 ] && player $player_args ${d}1 --audio-file=${d}1aud &
}
overwrite_f(){
	# Overwrites filename 2nd arg at $d with 1st arg
	[ -f $d$1 ] && mv -f $d$1 $d$2
}
youtube_f_get(){
	# Uses $url $resume
	# Args are: 1-quality 2-speed 3-suffix
	[ $resume -eq 0 ] && overwrite_f 1${3} 0${3}
	echo Downloading at f$1 and s = $2
	youtube-dl $yt_def_args -r $2 -f $1 $url -o ${d}1${3} &
}
youtube_dash(){
	# Downloads both video and audio dash versions.
	# Uses $url $resume
	youtube_f_get ${quality=242} ${speed=32K}
	sleep 10
	yt_def_args='-q '$yt_def_args
	# Next call to youtube_f_get is quiet
	printf '\n'
	youtube_f_get ${aquality=250} ${speed} aud
	sleep 20
	view_file
}
streamlink_dl(){
	# Uses $: url resume
	[ $resume -eq 0 ] && overwrite_f 1 0
	echo Downloading at q = ${squality=240p}
	streamlink $url ${squality} -o ${d}1 &
	sleep 30
}
streamlink_stream(){
	# Uses $: url
	echo Streaming at ${squality=240p}
	streamlink -p 'mpv --title="streamlink player"' --player-no-close --player-passthrough hls $url ${squality}
}
case "$1" in
	add)
		shift
		set_url_ax $@
		[ -z $url ] || echo $url >> $q
	;;
	top)
		nx KEEP
		echo $url
	;;
	fls)
		> $q
	;;
	see)
		cat $q
	;;
	view)
		view_file
	;;
	ytd)
		shift
		set_url $@
		youtube_dash
	;;
	ytdr)
		shift
		set_url $@
		resume=1
		echo 'Resuming download..'
		youtube_dash
	;;
	sls)
		shift
		set_url $@
		streamlink_stream
	;;
	sld)
		shift
		set_url $@
		streamlink_dl
	;;
	sldr)
		shift
		set_url $@
		resume=1
		streamlink_dl
	;;
	*)
		#echo Options were: $@
		set_url $@
		case "$url" in
			*.youtube.com/watch?v=*)
				youtube_dash
			;;
			*.crunchyroll.com/*)
				streamlink_stream
			;;
		esac
	;;
esac
