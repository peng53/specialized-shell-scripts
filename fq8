#!/bin/sh
d=/mnt/ramdisk/
q=${d}mq
yt_def_args='--no-part --youtube-skip-dash-manifest --no-call-home --no-playlist'
player_args='--pause --keep-open --really-quiet'
rss_feeds=~/.newsbeuter/urls

alias pp='[ -f ${d}1 ] && mv -f ${d}1 ${d}0'
alias youtube-dl=~/bin/youtube-dl
alias player='DISPLAY=:0 mpv'
alias err_beep='beep -f 100 -d 500 -r 2'

#alias play_vid='DISPLAY=:0 mpv --pause --keep-open --really-quiet ${d}1'
alias streamlink='~/.local/bin/streamlink -p mpv --player-no-close --player-passthrough hls'
nx(){
	# Gets top of the top. Pops it unless there's an 1st argument.
	read -r L < $q
	echo $L
	[ $# -eq 0 ] && sed -i '1d;/^$/d' $q
}
try_play(){
	if [ -s ${d}1 ]
	then
		player $player_args ${d}1 &
	else
		err_beep
	fi
}
dl_vid(){
	# Usage: dl_vid URL [RESM]
	# Requires atleast 1 argument.
	[ $# -eq 0 ] || [ -s ${d}lfile ] && return 1
	touch ${d}lfile
	[ $# -eq 1 ] && pp
	echo Downloading at q = ${quality=36} and s = ${speed=40k}
	youtube-dl $yt_def_args -r $speed -f $quality $1 -o ${d}1 || err_beep &
	sleep 30
	rm ${d}lfile
	return 0
}
dl_vid_old(){
	# where $1 is url
	# $2 is resume/not
	[ -z $1 ] && return 1
	[ -s ${d}lfile ] && return 1
	touch ${d}lfile
	[ -z $2 ] && pp
	echo Downloading at q = ${quality=36} and s = ${speed=40k}
	youtube-dl $yt_def_args -r $speed -f $quality $1 -o ${d}1 || err_beep &
	sleep 30
	rm ${d}lfile
	return 0
}
if [ $# -gt 0 ]
then
	case "$1" in
		top)
			nx KEEP
		;;
		add)
			echo $2 >> $q
		;;
		fls)
			> $q
		;;
		see)
			cat $q
		;;
		view)
			player $player_args ${d}1 &
		;;
		halt)
			[ -n $(pgrep youtube-dl) ] && killall youtube-dl
		;;
		resm)
			dl_vid $([ -z $2 ] && nx || echo $2) RESM && try_play
		;;
		xc)
			dl_vid $(xclip -o) && try_play
		;;
		go)
			dl_vid $2 && try_play
		;;
		plunge)
			[ -f ${d}lfile ] && rm ${d}lfile
		;;
		sets)
			echo dash- use speed=X then export
			echo fish- use set -x speed
		;;
		cr) # no 2nd arg, use q.
			streamlink $([ -z $2 ] && nx || echo $2) ${squality=240p}
		;;
		F)	# get possible quality
			# if no 2nd arg, use q.
			youtube-dl $yt_def_args -F $([ -z $2 ] && nx || echo $2)
		;;
		subscribe)
	#		if [ $# -gt 1 ]
	#		then
	#			l=$2
	#		else
	#			l=$(xclip -o)
	#		fi
			l=$([ $# -gt 1 ] && echo $2 || xclip -o)
			if [ -n $l ]
			then
				echo $l >> $rss_feeds
				echo Added $l to $rss_feeds
			fi
		;;
	esac
else
	# If lfile exists: play. otherwise: play depending on whats on q
	if [ -f ${d}lfile ]
	then
		player $player_args ${d}1
		rm ${d}lfile
	else
		url=`nx`
		case "$url" in
			*.youtube.com/watch?v=*)
				dl_vid $url && try_play
			;;
			*.crunchyroll.com/*)
				streamlink $url ${squality=240p}
			;;
			*)
				echo $url
				echo Option not recognized or q is empty.
				echo $url >> $q
			;;
		esac
	fi
fi
